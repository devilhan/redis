
redis 删除机制：
  定期删除  - 对内存友好
  惰性删除  - 对CPU友好
  
  所以redis 采用的是定期删除+惰性删除








redis 淘汰策略：
  从已设置过期时间的数据集
    volatile-lru（最近最少使用）
    volatile-ttl（将要过期）
    volatile-random
    
  从数据集
    allkeys-lru
    allkeys-random
  
  禁止驱逐数据
    no-enviction
  
  
  
  
  
  
  
  
  redis持久化
    RDB： 保存redis 在某个时间点上的数据集  
      优点
      - 适用于灾难恢复
      - 可以最大化redis的性能  父进程在保存rdb文件时，fork出一个子进程，子进程处理接下来的保存工作
      - 在恢复大数据集时速度比AOF的恢复速度要快
      缺点
      - 服务器故障时容易丢失数据
      - 每次保存rdb时，redis都要fork出一个子进程，占用cpu资源
      
    AOF：append only file
      优点
      - 可以设置不同的fsync(文件同步) ，默认每秒钟一次fsync
      - 只进行追加操作的日志文件 即使日志包含未写入完整的命令，redis-check-aof工具可以轻易的修复这种问题
      - 在aof 文件体积变得过大时，自动的在后台对aof 重写
      - aof文件有序保存对数据库执行的所有写操作，易懂，对文件进行分析轻松
      缺点
      - 文件比rdb大
      - 根据所使用fsync策略，aof 的速度慢于rdb
      
    
    
    
    
    
    
redis 集群模式
      主从    一个master,多个slave  master宕机，写受限，读不受限
      哨兵    主从基础上增加一个sentinel集群，master宕机，选取数据最接近master的slave上位
      集群    一般三主三从 redis将所有存储分为16384个槽区，每个节点管控一段槽区
      
      
      





redis数据分区算法
   虚拟槽分区
  
  
  
  
  
redis 缓存问题
  雪崩      缓存中大量数据过期，造成数据库压力过大   -- 设置过期时间随机错开
  击穿      高并发的情况下，缓存中没有数据，但是数据库中存在数据    -- 将热点数据设置成不过期
  穿透      查询数据库中没有的数据库    -- 将数据库中不存在的值放入缓存中设置为null
  
   
 


redis缓存一致性
  双写模式：每次修改数据库的数据后，在更新redis中的数据，使用了两次写操作，成为双写模式
  高并发下有可能会有脏数据
  
  失效模式：每次修改数据库的数据后，删除redis中的缓存的数据，当有redis查询请求时，会先去数据库查询，然后更新到redis中，后续继续请求redis
  同样会存在脏数据
  
  
  Cache Aside Pattern 旁路缓存 常见模式  适合一写多读场景
    控制逻辑实现在应用程序中，缓存不和数据库直接进行交互，而是有应用程序来同时和缓存以及数据库打交道。
    两种：1. 更新数据库更新缓存   2.  更新数据库，删除缓存对应数据
    
  Read-Through/Write-Through 读写穿透
    
  Write-Behind  异步写    缓存一致性要求不高，适合频繁写的场景
  
  绝对一致性： 不加缓存
  
  强一致性： 加锁
  
  弱一致性： 旁路缓存和读写穿透
  
  
  https://db-engines.com/en/ranking
  
    
    
    
  
  
