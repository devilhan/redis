Docker安装
阿里安装:
  yum install wget
  wget http://download.redis.io/release/redis-5.0.5.tar.gz
  tar xf redis-5.0.5.tar.gz
  
  进入源码目录src  README.md   --- 规避IO
  make  
  yum install gcc  
  make distclean
  make
  cd src 查看已可执行程序
  make install PREFIX=/opt/devilhan/redis5
  vi /etc/profile
    export REDIS_HOME=/opt/devilhan/redis5
    export PATH=$PATH:$REDIS_HOME/bin
  source /etc/profile
  cd utils
  ./install_server.sh
  一个物理机中可以有多个redis实例（进程）,通过port区分
  多个实例需各自配置文件
  service redis_6379 start/stop/status  > linux /etc/init.d/**
  
  string:  (字符串string|数值int|位图bitmap)
    append  key value   -> Append a value to a key
    
    bitcount key [start end]  -> count set bits in a string
    
    bitfield key [GET type offset] [SET type offset value] [INCRBY type offset increment] [OVERFLOW WRAP|SAT|FAIL]
              -> Perform arbitrary bitfield integer operations on strings
    
    bitop  operation destkey key [key ...] -> Perform bitwise operations between strings
    
    bitpos key bit [start] [end] -> Find first bit set or clear in a string
   
    decr key -> Decrement the integer value of a key by one
    
    decrby key decrement -> Decrement the integer value of a key by the given number
    
    get key -> Get the value of a key
    
    getbit key offset -> Returns the bit value at offset in the string value stored at key
    
    getrange key start end -> Get a substring of the string stored at a key
    
    getset key value -> Set the string value of a key and return its old value
    
    incr key -> Increment the integer value of a key by one
    
    incrby key increment -> Increment the  integer value of a key by the given amount
    
    incrbyfloat key increment -> Increment the float value of a key by the given amount
    
    mget key [key ...] -> Get the value of all the given keys
    
    mset key value [key value...] -> Set multiple keys to multiple values
    
    msetnx key value [key value...] -> Set multiple keys to multiple values ,only if none of the keys exist
    
    psetex key milliseconds value -> set the value and expiration in milliseconds of a key
    
    set key value [expiration ex seconds | px milliseconds] [nx|xx]
    
    setbit key offset value -> Sets or clears the bit at offset in the string value stored at key
    
    setex key seconds value -> Set the value and expiration of a key
    
    setnx key value -> Set the value of a key ,only if the key does not exist
    
    setrange key offset value -> Overwrite part of a string at key starting at the specified offset
    
    strlen key -> Get the length of the value stored in a key 
    
    应用bitmap
    
      统计用户登录天数：
        假设：
          setbit devilhan 7 1  ->  第8天登录
          setbit devilhan 1 1 ->  第二天登录
          setbit devilhan 364 1 -> 第365天登录
          
          strlen devilhan  -> 最长消耗46个字节  -> 46
          bitcount devilhan -2 -1  -> 取最后两个字节， 16天  -> 1
     
      618做活动：只要登录就要送礼物
        仓库备份多少礼物
        假设京东有2E用户
            僵尸用户
            冷热用户/忠诚用户
            
            活跃用户统计
                1号~3号 连续登录去重
                setbit 20190101 1 1   用户1 1号登录
                setbit 20190102 1 1   用户1 2号登录
                setbit 20190102 7 1   用户2 2号登录
                bitop or destkey 20190101 20190102  -> 进行或运算
                bitcount destkey 0 -1  -> 活跃用户为2
                
    list:
      
      blpop key [key ...] timeout  -> Remove and get the first element in a list,or block until one is available
      
      brpop key [key ...] timeout  -> Remove and get the last element in a list , or block until one is available
      
      brpoplpush source destination timeout -> Pop a value from a list , push it to another list and return it ; or block until one is available
      
      lindex key index -> Get an element from a list by its index
      
      linsert key before|after pivot value  ->  Insert an element before or after another element in a list  
      
      llen key -> Get the length of a list 
      
      lpop key -> Remove and get the first element in a list
      
      lpush key value [value ...]  -> Prepend one or multiple values to a list
      
      lpushx key value -> Prepend a value to a list ,only of the list exists
      
      lrange key start stop -> Get a range of elements from a list
      
      lrem key count value -> Remove elements from a list
      
      lset key index value -> Set the value of an element in a list by its index
      
      ltrim key start top -> Trim a list to the specified range
       
      rpop key -> Remove and get the last element in a list
      
      rpoplpush sourve destination -> Remove the last element in a list ,prepend it to another list and return it
      
      rpush key value [value ...] -> Append one or multiple values to a list
      
      rpushx key value -> Append a value to a list ,only if the list exists
      
   
   hash:
      
      hdel key field [field ...] -> Delete one or more hash fields
      
      hexists key field -> Determine if a hash field exists
      
      hget key field -> Get the value of a hash field
      
      hgetall key -> Get all the fields and values in a hash
      
      hincrby key field increment -> Increment the integer value of a hash field by the given number
      
      hincybyfloat key field increment -> Increment the float value of a hash field by the given amount 
      
      hkeys key -> Get all the fields in a hash
      
      hlen key -> Get the number of fields in a hash
      
      hmget key field [field ...] -> Get the values of all the given hash fields
      
      hmset key field [field ...] -> Set multiple hash fields to multiple values
      
      hscan key cursor [match pattern][count count] -> Incrementally iterate hash fields and associated values
      
      hset key field value -> Set the string value of a hash field
      
      hsetnx key field value -> Set the value of a hash field ,only if the field does not exist
      
      hstrlen key field -> Get the length of the value of a hash field
      
      hvals key -> Get all the values in a hash
      
      
    set:
      
      sadd key member [members ...] -> Add one or more members to a set
      
      scard key -> Get the number of members in a set
      
      sdiff key [key ...] -> Substract multiple sets 差集
      
      sdiffstore destination key [key ...] -> Substract multiple sets and store the resulting set in a key
      
      sinter key [key ...] -> Intersect multiple sets 交集
      
      sinterstore destination key [key ...] -> Intersect multiple sets and store the resulting set in a key
      
      sismember key member -> Determine if a given value is a member of a set
      
      smembers key -> Get all the members in a set
      
      smove source destination member -> Move a member from one set to another
      
      spop key [count] -> Remove and return one or multiple random members from a set
      
      srandmember key [count] -> Get one or multiple random members from a set 正数不重复，负数可重复 
      
      srem key member [member ...] -> Remove one or more members from a set
      
      sscan key cursor [match pattern] [count count] -> Incrementally iterate set elements
      
      sunion key [key ...] -> Add multiple sets  并集
      
      sunionstore destination key [key ...] -> Add multiple sets and store the resulting set in a key
      
      
    sorted_set  : 应用歌曲播放量
      
      bzpopmax key [key ...] timeout -> Remove and return the member with the highest score from one or more sorted sets, or block until one is available
      
      bzpopmin key [key ...] timeout -> Remove and return the member with the lowest score from one or more sorted sets ,or block until one is available
      
      zadd key [nx|xx] [ch] [incr] score member [score member...] -> Add one or more members to a sorted set ,or update its score if it already exists
      
      zcard key -> Get the number of members in a sorted set
      
      zcount key min max -> Count the members in a sorted set with scores within the given values
      
      zincrby key increment member -> Increment the score of a member in a sorted set
      
      zinterstore destination numkeys key [key ...] [weight weight] [aggregate sum|min|max  ->
          Intersect multiple sorted sets and store the resulting sorted set in a new key
      
      zlexcount key min max -> Count the number of members in a sorted set between a given lexicographical range
      
      zpopmax key [count] -> Remove and return members with the highest scores in a sorted set
      
      zpopmin key [count] -> Remove and return members with the lowest scores in a sorted set
      
      zrange key start stop [withscores] -> Return a range of members in a sorted set ,by index
      
      zrangebylex key min max [limit offset count] -> Return a range of members in a sorted set ,by lexicographical  字典序
      
      zrangebyscore key min max [withscores] [limit offset count] -> Return a range of members in a sorted set ,by score
      
      zrank key member -> Determine the index of a member in a sorted set
      
      zrem key member [member ...] -> Remove one or more members from a sorted set
      
      zremrangebylex key min max -> Remove all members in a sorted set between the given lexicographical range
      
      zremrangebyrank eky start stop -> Remove all members in a sorted set within the given indexes
      
      zremrangebyscore key min max -> Remove all members in a sorted set within the given scores
      
      zrevrange key start stop [withscores] -> Return a range of members in a sorted set ,by index ,with scores ordered from high to low
      
      zrevrangebylex key max min [limit offset count] -> 
          Return a range of members in a sorted set ,by lexicographical range ,ordered from higher to lower strings
          
      zrevrangebyscore key max min [withscores][limit offset count] ->
          Return a range of members in a sorted set, by score,with scores ordered from high to low
          
      zrevrank key member -> Determine the index of a member in a sorted set ,with scores ordered from high to low
      
      zscan key cursor [match pattern] [count count] -> Incrementally iterate sorted sets elements and associated scores
      
      zscore key member -> Get the score associated with the given member in a sorted set
      
      zunionstore destination numkeys key [key ...] [weights weight] [aggregate sum|min|max] ->  并集
          Add multiple sorted sets and store the resulting sorted set in a new key
      
      
      
      sorted_set 如何实现排序的，增删改查的速度如何？
        排序通过skip_list（跳跃表）实现的  随机造层 类平衡树
        增删改查速度平均值相对最优
      
      
      pipeline:  降低通信成本
        nc localhost 6379 建立连接socket
        echo -e "set k2 99\n incr k2\n get k2" | nc localhost 6379
        
        
        redis.cn/topics
        
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
    
    
    
redis 二进制安全：取字符流    
